digraph world {
//bgcolor="#75b2dd" // chart 6
//bgcolor="0.58 0.40 1.00" // columbia blue

//size="50,50";
//page="50,50";
//rankdir=LR;
//ratio=fill;
ordering=out;
//{rank=same; new_step;}
//{rank=same; sidechain rigid_body hybrid_monte_carlo;}
//{rank=same; acceptance_test;}
//{rank=same; finish;}

// default shape & size
node [fontsize=20, shape = record];
new_step [label = "New Step"];
hybrid_monte_carlo [label = "Hybrid-Monte Carlo\nSimulation"];
rigid_body [label = "Rigid Body\nTranslation & Rotation"];
rigid_check_clash [label = "Screen for Clashes"];
acceptance_test [label = "Minimize & Apply Metropolis\nAcceptance Criteria"];
finish [label = "Finish"];
accept [label = "Accept"];
reject [label = "Reject"];

{ rank=same; hybrid_monte_carlo rigid_body sidechain; }

{ rank=same; rigid_check_clash side_check_clash; }


//subgraph sidechain { ranksep = "2.0"; sidechain rotamer_library random one_chi all_chi side_check_clash one two three}
subgraph sidechain { sidechain rotamer_library random one_chi all_chi side_check_clash one two three}
sidechain [label = "Sidechain Move"];
rotamer_library [label = "Rotamer Library\nBased"];
random [label = "Non-Library\nBased"];
one_chi [label = "One &chi;-\nPerturbation"];
all_chi [label = "All &chi;-\nPerturbation"];
side_check_clash [label = "Screen for Clashes"];
one [label = "1"];
two [label = "2"];
three [label = "3"];

subgraph hmc { rigid_body rigid_check_clash }

subgraph rmc { hybrid_monte_carlo }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////   Start       /////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
new_step -> rigid_body:n
new_step -> hybrid_monte_carlo:n
new_step -> sidechain:n

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////   Hybrid MC   /////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
hybrid_monte_carlo:s -> acceptance_test:n

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////  Rigid  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rigid_body -> rigid_check_clash;
{ rigid_check_clash; } -> { rigid_body; acceptance_test; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////  Sidechain   /////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//cluster_size [shape=record,label="{ Cluster Size |{1|2|3}}"];
cluster_size [shape=box,label="Choose\nCluster Size"];
sidechain -> cluster_size;
cluster_size -> { one; two; three; }
{ one; two; three; } -> { rotamer_library; random; }

random -> { one_chi; all_chi; } [ style = "dotted" ];
random -> { one_chi; all_chi; } [ style = "dotted" ];
random -> { one_chi; all_chi; } [ style = "dotted" ];

{ one_chi; all_chi; } -> { side_check_clash; }
rotamer_library:sw -> side_check_clash:nw

side_check_clash -> acceptance_test:n
side_check_clash:ne -> sidechain:s

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////   End   /////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
acceptance_test -> accept:n
acceptance_test -> reject:n
accept:n -> new_step:se
reject:n -> new_step:se
accept:s -> finish:n
reject:s -> finish:n

}
